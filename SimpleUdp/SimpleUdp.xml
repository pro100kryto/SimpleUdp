<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SimpleUdp</name>
    </assembly>
    <members>
        <member name="T:SimpleUdp.Datagram">
            <summary>
            Datagram received by this endpoint.
            </summary>
        </member>
        <member name="F:SimpleUdp.Datagram.endPoint">
            <summary>
            remote endpoint.
            </summary>
        </member>
        <member name="F:SimpleUdp.Datagram.data">
            <summary>
            Data received from the remote endpoint.
            </summary>
        </member>
        <member name="T:SimpleUdp.SimpleUdpEvents">
            <summary>
            Events.
            </summary>
        </member>
        <member name="F:SimpleUdp.SimpleUdpEvents.Started">
            <summary>
            The endpoint listener has started.
            </summary>
        </member>
        <member name="F:SimpleUdp.SimpleUdpEvents.Stopped">
            <summary>
            The endpoint listener has stopped.
            </summary>
        </member>
        <member name="M:SimpleUdp.SimpleUdpEvents.#ctor">
            <summary>
            Instantiate.
            </summary>
        </member>
        <member name="T:SimpleUdp.UdpEndpoint">
            <summary>
            UDP endpoint, both client and server.
            </summary>
        </member>
        <member name="E:SimpleUdp.UdpEndpoint.EndpointDetected">
            <summary>
            Event to fire when a new endpoint is detected.
            </summary>
        </member>
        <member name="E:SimpleUdp.UdpEndpoint.DatagramReceived">
            <summary>
            Event to fire when a datagram is received.
            </summary>
        </member>
        <member name="P:SimpleUdp.UdpEndpoint.EndPoints">
            <summary>
            Retrieve a list of remote endpoints.
            </summary>
        </member>
        <member name="P:SimpleUdp.UdpEndpoint.Events">
            <summary>
            Events.
            </summary>
        </member>
        <member name="M:SimpleUdp.UdpEndpoint.#ctor(System.String,System.Int32)">
            <summary>
            Instantiate the UDP endpoint with default Ttl = 64 and BufferSize = 1024.
            </summary>
            <param name="ipAddress">Local ip.</param>
            <param name="port">Local port number.</param>
        </member>
        <member name="M:SimpleUdp.UdpEndpoint.#ctor(System.Int32)">
            <summary>
            Instantiate the UDP endpoint with default Ttl = 64 and BufferSize = 1024.
            </summary>
            <param name="port">Local port number.</param>
        </member>
        <member name="M:SimpleUdp.UdpEndpoint.#ctor(System.Net.EndPoint)">
            <summary>
            Instantiate the UDP endpoint with default Ttl = 64 and BufferSize = 1024.
            </summary>
            <param name="localEP">Local EndPoint.</param>
        </member>
        <member name="M:SimpleUdp.UdpEndpoint.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Use existing Socket.
            </summary>
        </member>
        <member name="M:SimpleUdp.UdpEndpoint.#ctor">
            <summary>
            Instantiate the UDP endpoint with default Ttl = 64 and BufferSize = 1024.
            </summary>
        </member>
        <member name="M:SimpleUdp.UdpEndpoint.Start">
            <summary>
            Start the UDP listener to receive datagrams.  Before calling this method, set the 'DatagramReceived' event.
            </summary>
            <exception cref="T:System.InvalidOperationException">Already started</exception>
        </member>
        <member name="M:SimpleUdp.UdpEndpoint.StopRequest">
            <summary>
            Request listener to be stopped.
            </summary>
        </member>
        <member name="M:SimpleUdp.UdpEndpoint.Stop">
            <summary>
            Stop the UDP listener inmediatly.
            </summary>
        </member>
        <member name="M:SimpleUdp.UdpEndpoint.Dispose">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="M:SimpleUdp.UdpEndpoint.Send(System.String,System.Int32,System.String)">
            <summary>
            Send a datagram to the specific IP address and UDP port.
            This will throw a SocketException if the report UDP port is unreachable.
            </summary>
            <param name="ip">IP address.</param>
            <param name="port">Port.</param>
            <param name="text">Text to send.</param>
        </member>
        <member name="M:SimpleUdp.UdpEndpoint.Send(System.Net.EndPoint,System.String)">
            <summary>
            Send a datagram to the specific IP address and UDP port.
            This will throw a SocketException if the report UDP port is unreachable.
            </summary>
            <param name="ipe">Remote end point.</param>
            <param name="text">Text to send.</param>
        </member>
        <member name="M:SimpleUdp.UdpEndpoint.Send(System.String,System.Int32,System.Byte[])">
            <summary>
            Send a datagram to the specific IP address and UDP port.
            This will throw a SocketException if the report UDP port is unreachable.
            </summary>
            <param name="ip">IP address.</param>
            <param name="port">Port.</param>
            <param name="data">Bytes.</param>
        </member>
        <member name="M:SimpleUdp.UdpEndpoint.Send(System.Net.EndPoint,System.Byte[])">
            <summary>
            Send a datagram to the specific IP address and UDP port.
            This will throw a SocketException if the report UDP port is unreachable.
            </summary>
            <param name="ipe">Remote end point.</param>
            <param name="data">Bytes.</param>
        </member>
        <member name="M:SimpleUdp.UdpEndpoint.SendOffset(System.String,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Send a datagram to the specific IP address and UDP port with specific offset and size.
            This will throw a SocketException if the report UDP port is unreachable.
            </summary>
            <param name="ip">IP address.</param>
            <param name="port">Port.</param>
            <param name="data">Bytes.</param>
        </member>
        <member name="M:SimpleUdp.UdpEndpoint.SendOffset(System.Net.EndPoint,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Send a datagram to the specific IP address and UDP port with specific offset and size.
            This will throw a SocketException if the report UDP port is unreachable.
            </summary>
            <param name="ipe">Remote end point.</param>
            <param name="data">Bytes.</param>
        </member>
        <member name="M:SimpleUdp.UdpEndpoint.SendAsync(System.String,System.Int32,System.String)">
            <summary>
            Send a datagram asynchronously to the specific IP address and UDP port.
            This will throw a SocketException if the report UDP port is unreachable.
            </summary>
            <param name="ip">IP address.</param>
            <param name="port">Port.</param>
            <param name="text">Text to send.</param>
        </member>
        <member name="M:SimpleUdp.UdpEndpoint.SendAsync(System.Net.EndPoint,System.String)">
            <summary>
            Send a datagram asynchronously to the specific IP address and UDP port.
            This will throw a SocketException if the report UDP port is unreachable.
            </summary>
            <param name="ipe">Remote end point.</param>
            <param name="text">Text to send.</param>
        </member>
        <member name="M:SimpleUdp.UdpEndpoint.SendAsync(System.String,System.Int32,System.Byte[])">
            <summary>
            Send a datagram asynchronously to the specific IP address and UDP port.
            This will throw a SocketException if the report UDP port is unreachable.
            </summary>
            <param name="ip">IP address.</param>
            <param name="port">Port.</param>
            <param name="data">Bytes.</param> 
        </member>
        <member name="M:SimpleUdp.UdpEndpoint.SendAsync(System.Net.EndPoint,System.Byte[])">
            <summary>
            Send a datagram asynchronously to the specific IP address and UDP port.
            This will throw a SocketException if the report UDP port is unreachable.
            </summary>
            <param name="ipe">Remote end point.</param>
            <param name="data">Bytes.</param> 
        </member>
        <member name="M:SimpleUdp.UdpEndpoint.SendOffsetAsync(System.String,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Send a datagram asynchronously to the specific IP address and UDP port with specific offset and size.
            This will throw a SocketException if the report UDP port is unreachable.
            </summary>
            <param name="ip">IP address.</param>
            <param name="port">Port.</param>
            <param name="data">Bytes.</param> 
        </member>
        <member name="M:SimpleUdp.UdpEndpoint.SendOffsetAsync(System.Net.EndPoint,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Send a datagram asynchronously to the specific IP address and UDP port with specific offset and size.
            This will throw a SocketException if the report UDP port is unreachable.
            </summary>
            <param name="ipe">Remote end point.</param>
            <param name="data">Bytes.</param> 
        </member>
    </members>
</doc>
